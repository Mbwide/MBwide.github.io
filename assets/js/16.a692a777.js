(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{528:function(a,s,t){"use strict";t.r(s);var e=t(4),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"malloc-calloc-realloc区别与联系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#malloc-calloc-realloc区别与联系"}},[a._v("#")]),a._v(" malloc/calloc/realloc区别与联系")]),a._v(" "),t("h3",{attrs:{id:"malloc-calloc-realloc和free介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#malloc-calloc-realloc和free介绍"}},[a._v("#")]),a._v(" malloc/calloc/realloc和free介绍：")]),a._v(" "),t("h4",{attrs:{id:"_1-malloc函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-malloc函数"}},[a._v("#")]),a._v(" 1 malloc函数")]),a._v(" "),t("p",[t("strong",[a._v("定义与声明：")]),a._v(" 在堆上，分配n个字节，并返回void指针类型。其函数声明如下：")]),a._v(" "),t("div",{staticClass:"language-C line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("malloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("strong",[a._v("参数释义：")])]),a._v(" "),t("p",[a._v("n：申请空间大小（单个类型大小*总个数）//类型大小为字节")]),a._v(" "),t("p",[t("strong",[a._v("函数详述：")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("函数返回值为void型指针。如果执行成功，函数从堆上获得n个字节的空间，并"),t("strong",[a._v("返回该空间的首地址")]),a._v("。如果执行失败，函数"),t("strong",[a._v("返回NULL")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("由于malloc函数值的类型为void型指针，因此，可以将其值类型转换后赋给任意类型指针，这样就可以通过操作该类型指针来操作从堆上获得的内存空间。")])]),a._v(" "),t("li",[t("p",[a._v("需要注意的是，"),t("strong",[a._v("malloc函数分配得到的内存空间是未初始化的")]),a._v("。")])])]),a._v(" "),t("p",[t("strong",[a._v("注意：通过malloc函数得到的堆内存必须使用memset函数来初始化。")])]),a._v(" "),t("h4",{attrs:{id:"_2-calloc函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-calloc函数"}},[a._v("#")]),a._v(" 2 calloc函数")]),a._v(" "),t("p",[t("strong",[a._v("定义与声明：")]),a._v(" 在堆上，分配n * size个字节，并初始化为0，返回void *类型。其函数声明如下：")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("calloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("strong",[a._v("参数释义：")])]),a._v(" "),t("p",[a._v("size：单个类型大小")]),a._v(" "),t("p",[a._v("n：申请的个数")]),a._v(" "),t("p",[a._v("注意：最后申请空间大小为： n和size相乘")]),a._v(" "),t("p",[t("strong",[a._v("函数详述：")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("函数返回值为void型指针。如果执行成功，函数从堆上获得size * n的字节空间，并"),t("strong",[a._v("返回该空间的首地址")]),a._v("。如果执行失败，函数"),t("strong",[a._v("返回NULL")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("该函数与malloc函数的不同是，"),t("strong",[a._v("calloc函数得到的内存空间是初始化的，其内容全为0")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("calloc函数适合为数组申请空间，可以将size设置为数组元素的空间长度，将n设置为数组的容量。")])])]),a._v(" "),t("h4",{attrs:{id:"_3-realloc函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-realloc函数"}},[a._v("#")]),a._v(" 3 realloc函数")]),a._v(" "),t("p",[t("strong",[a._v("定义与声明：")]),a._v(" 重新分配堆上的void指针p所指的空间为n个字节，同时会复制原有内容到新分配的堆上存储空间。其函数声明如下：")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("realloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("strong",[a._v("参数释义：")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("p：堆上已经存在空间的地址")])]),a._v(" "),t("li",[t("p",[a._v("n：空间的大小")])])]),a._v(" "),t("p",[t("strong",[a._v("函数详述：")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("其中，指针p必须为指向堆内存空间的指针，即由malloc函数、calloc函数或realloc函数分配空间的指针。")])]),a._v(" "),t("li",[t("p",[a._v("realloc函数将指针p指向的内存块的大小改变为n字节。如果n小于或等于p之前指向的空间大小，保持原有状态不变。如果n大于原来p之前指向的空间大小，系统将重新为p从堆上分配一块大小为n的内存空间，同时，将原来指向空间的内容依次复制到新的内存空间上，p之前指向的空间被释放。")])]),a._v(" "),t("li",[t("p",[a._v("relloc函数分配的空间也是未初始化的。")])])]),a._v(" "),t("h4",{attrs:{id:"_3-free函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-free函数"}},[a._v("#")]),a._v(" 3 free函数")]),a._v(" "),t("p",[t("strong",[a._v("定义与声明：")]),a._v(" 释放void指针p所指的堆上的空间。")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("free")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("strong",[a._v("参数释义：")])]),a._v(" "),t("p",[a._v("p：堆上已经存在空间的地址")]),a._v(" "),t("p",[t("strong",[a._v("函数详述：")])]),a._v(" "),t("ul",[t("li",[a._v("释放void指针p所指的堆上的空间。")])]),a._v(" "),t("p",[t("strong",[a._v("注意：使用malloc函数，calloc函数和realloc函数分配的内存空间都要使用free函数或指针参数为NULL的realloc函数来释放")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"_4-memset函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-memset函数"}},[a._v("#")]),a._v(" 4 memset函数")]),a._v(" "),t("p",[t("strong",[a._v("定义与声明：")]),a._v(" 对于void指针p为首地址的n个字节，将其中的每个字节设置为a。")]),a._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("memset")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);